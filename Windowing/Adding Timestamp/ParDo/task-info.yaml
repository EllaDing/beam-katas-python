type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 1243
    length: 110
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1231
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      def process(self, element, **kwargs):
              unix_timestamp = element.timestamp.timestamp()
              yield window.TimestampedValue(element, unix_timestamp)
  - offset: 1907
    length: 30
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1791
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: beam.ParDo(AddTimestampDoFn())
  text: |+
    #   Licensed to the Apache Software Foundation (ASF) under one
    #   or more contributor license agreements.  See the NOTICE file
    #   distributed with this work for additional information
    #   regarding copyright ownership.  The ASF licenses this file
    #   to you under the Apache License, Version 2.0 (the
    #   "License"); you may not use this file except in compliance
    #   with the License.  You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    import datetime
    import pytz

    import apache_beam as beam
    from apache_beam.transforms import window

    from log_elements import LogElements


    class Event:
        def __init__(self, id, event, timestamp):
            self.id = id
            self.event = event
            self.timestamp = timestamp

        def __str__(self) -> str:
            return f'Event({self.id}, {self.event}, {self.timestamp})'


    class AddTimestampDoFn(beam.DoFn):

        TODO()


    with beam.Pipeline() as p:

      (p | beam.Create([
              Event('1', 'book-order', datetime.datetime(2020, 3, 4, 0, 0, 0, 0, tzinfo=pytz.UTC)),
              Event('2', 'pencil-order', datetime.datetime(2020, 3, 5, 0, 0, 0, 0, tzinfo=pytz.UTC)),
              Event('3', 'paper-order', datetime.datetime(2020, 3, 6, 0, 0, 0, 0, tzinfo=pytz.UTC)),
              Event('4', 'pencil-order', datetime.datetime(2020, 3, 7, 0, 0, 0, 0, tzinfo=pytz.UTC)),
              Event('5', 'book-order', datetime.datetime(2020, 3, 8, 0, 0, 0, 0, tzinfo=pytz.UTC)),
           ])
         | TODO()
         | LogElements(with_timestamp=True))

  learner_created: false
- name: tests.py
  visible: false
  text: |
    #   Licensed to the Apache Software Foundation (ASF) under one
    #   or more contributor license agreements.  See the NOTICE file
    #   distributed with this work for additional information
    #   regarding copyright ownership.  The ASF licenses this file
    #   to you under the Apache License, Version 2.0 (the
    #   "License"); you may not use this file except in compliance
    #   with the License.  You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    from test_helper import failed, passed, get_file_output, test_is_not_empty


    def test_output():
        output = get_file_output()

        answers = [
            "Event(1, book-order, 2020-03-04 00:00:00+00:00), timestamp='2020-03-04T00:00:00Z'",
            "Event(2, pencil-order, 2020-03-05 00:00:00+00:00), timestamp='2020-03-05T00:00:00Z'",
            "Event(3, paper-order, 2020-03-06 00:00:00+00:00), timestamp='2020-03-06T00:00:00Z'",
            "Event(4, pencil-order, 2020-03-07 00:00:00+00:00), timestamp='2020-03-07T00:00:00Z'",
            "Event(5, book-order, 2020-03-08 00:00:00+00:00), timestamp='2020-03-08T00:00:00Z'"
        ]

        if all(line in output for line in answers):
            passed()
        else:
            failed("Incorrect output. Assign timestamp based on the Event.date.")


    if __name__ == '__main__':
        test_is_not_empty()
        test_output()
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 10 Jul 2021 19:10:37 UTC
record: -1
