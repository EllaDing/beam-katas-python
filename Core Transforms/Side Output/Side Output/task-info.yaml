type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 1011
    length: 183
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1011
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      def process(self, element):
              if element <= 100:
                  yield element
              else:
                  yield pvalue.TaggedOutput(num_above_100_tag, element)
  - offset: 1302
    length: 123
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1123
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      beam.ParDo(ProcessNumbersDoFn())
                .with_outputs(num_above_100_tag, main=num_below_100_tag))
  text: |+
    #  Licensed to the Apache Software Foundation (ASF) under one
    #  or more contributor license agreements.  See the NOTICE file
    #  distributed with this work for additional information
    #  regarding copyright ownership.  The ASF licenses this file
    #  to you under the Apache License, Version 2.0 (the
    #  "License"); you may not use this file except in compliance
    #  with the License.  You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #  Unless required by applicable law or agreed to in writing, software
    #  distributed under the License is distributed on an "AS IS" BASIS,
    #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #  See the License for the specific language governing permissions and
    #  limitations under the License.

    import apache_beam as beam
    from apache_beam import pvalue

    from log_elements import LogElements

    num_below_100_tag = 'num_below_100'
    num_above_100_tag = 'num_above_100'


    class ProcessNumbersDoFn(beam.DoFn):

        TODO()


    with beam.Pipeline() as p:

      results = \
          (p | beam.Create([10, 50, 120, 20, 200, 0])
             | TODO()

      results[num_below_100_tag] | 'Log numbers <= 100' >> LogElements(prefix='Number <= 100: ')
      results[num_above_100_tag] | 'Log numbers > 100' >> LogElements(prefix='Number > 100: ')

  learner_created: false
- name: tests.py
  visible: false
  text: |
    #  Licensed to the Apache Software Foundation (ASF) under one
    #  or more contributor license agreements.  See the NOTICE file
    #  distributed with this work for additional information
    #  regarding copyright ownership.  The ASF licenses this file
    #  to you under the Apache License, Version 2.0 (the
    #  "License"); you may not use this file except in compliance
    #  with the License.  You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #  Unless required by applicable law or agreed to in writing, software
    #  distributed under the License is distributed on an "AS IS" BASIS,
    #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #  See the License for the specific language governing permissions and
    #  limitations under the License.

    from test_helper import failed, passed, get_file_output, test_is_not_empty


    def test_output():
        output = get_file_output()

        numbers_below_100 = ['0', '10', '20', '50']
        numbers_above_100 = ['120', '200']

        answers = []

        for num in numbers_below_100:
            answers.append('Number <= 100: ' + num)

        for num in numbers_above_100:
            answers.append('Number > 100: ' + num)

        if all(num in output for num in answers):
            passed()
        else:
            failed("Incorrect output. Output the numbers to the output tags accordingly.")


    if __name__ == '__main__':
        test_is_not_empty()
        test_output()
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 10 Jul 2021 06:55:29 UTC
record: -1
